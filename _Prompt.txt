I'm implementing a Warhammer 40K PvE game system that must strictly follow AI_TURN.md rules and AI_IMPLEMENTATION deployment instructions.
These 2 documents are you MAIN REFERENCES.
You must be an EXPERT in understanding their logics and content.

PROJECT CONTEXT:
TypeScript/React frontend with PIXI.js rendering
Python backend with pure stateless functions
Hex-based board game with sequential unit activation
Zero tolerance for architectural violations of AI_TURN.md specification

ARCHITECTURAL PRINCIPLES ESTABLISHED:
AI_TURN.md compliance is absolutely critical - no shortcuts or approximations
Sequential activation: ONE unit per gym step only
Built-in step counting in engine only, never retrofitted
Eligibility-based phases: phases end when activation pools empty
UPPERCASE fields: all unit stats must use proper naming convention
Single game_state: one authoritative state object, no wrapper patterns
Pure functions: handlers are stateless, no internal state storage

MY PREFERENCES ESTABLISHED:
Brutally honest and constructive assessments over polite optimism
AI_TURN.md compliance is non-negotiable
Practical implementation over theoretical perfection
Clear validation criteria for every decision
Expert-level technical depth required
Always use two code boxes for updates, indicate the path and name of the updated file, respect indentation, without ellipse, without workaround or defaut value

POTENTIAL REFERENCE HELP:
I have Added in the knowledge 40k_OLD
It is the previous version of the application.
Its main problem is the react conflicting with AI_TURN rules.
But for other purposes, you may save time having a look at how it manages some features. Of course, the main priority is to maintain the 100% compliance with AI_TURN

USER PREFERENCES:
Extremely detail-oriented about AI_TURN.md compliance
Wants exact specification implementation, not approximations
Prefers systematic debugging with evidence before solutions
Requires proper file paths and change tracking in format: FILE: path / CHANGE# / LINES / TYPE / BEFORE/AFTER / RESULT
Uses specific error reporting format with TypeScript compiler output



CURRENT PROBLEM:
Testing revealed critical failures. Backend is running stub implementations returning "not_implemented" errors while frontend still uses legacy action patterns. Our complete AI_TURN.md compliant implementation exists only in conversation, never deployed to actual files.
TEST RESULTS:
Shooting phase initialization: Eligible units show green circles (OK), Non-eligible units incorrectly show green circles (KO). Unit activation: Left click should show shooting preview but preview blinks once and disappears, unit becomes inactive (KO).
IMMEDIATE NEXT STEPS:

Deploy complete backend shooting_handlers.py implementation to replace stub code
Update frontend useEngineAPI.ts to use left_click/right_click pattern instead of legacy shoot actions
Verify integration layer connects frontend actions to backend handlers correctly
Add debug logging to trace execution path and validate pool building logic
Test the deployed implementation against AI_TURN.md specification requirements

FILES TO PROVIDE:
Include current shooting_handlers.py and useEngineAPI.ts files so I can see the actual deployed state versus our theoretical implementation. Also provide any API routing or integration files that connect frontend actions to backend handlers.





Externalize end_activation fuction
Check shooting LoS logic (cube ?)
Split BoardPvP like w40k_engin ?

TEST :
Terminal 1 : 
python services/api_server.py
Terminal 2 :
app
Terminal 3 :
python tests/test_board.py

callback chain: 
UnitRenderer → boardClickHandler → BoardPvp → BoardWithAPI → useEngineAPI
