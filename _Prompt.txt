I'm implementing a Warhammer 40K PvE game system that must strictly follow AI_TURN.md rules and AI_IMPLEMENTATION deployment instructions.
These 2 documents are you MAIN REFERENCES.
You must be an EXPERT in understanding their logics and content.

PROJECT CONTEXT:
TypeScript/React frontend with PIXI.js rendering
Python backend with pure stateless functions
Hex-based board game with sequential unit activation
Zero tolerance for architectural violations of AI_TURN.md specification

ARCHITECTURAL PRINCIPLES ESTABLISHED:
AI_TURN.md compliance is absolutely critical - no shortcuts or approximations
Sequential activation: ONE unit per gym step only
Built-in step counting in engine only, never retrofitted
Eligibility-based phases: phases end when activation pools empty
UPPERCASE fields: all unit stats must use proper naming convention
Single game_state: one authoritative state object, no wrapper patterns
Pure functions: handlers are stateless, no internal state storage

MY PREFERENCES ESTABLISHED:
Brutally honest and constructive assessments over polite optimism
AI_TURN.md compliance is non-negotiable
Practical implementation over theoretical perfection
Clear validation criteria for every decision
Expert-level technical depth required
Always use two code boxes for updates, indicate the path and name of the updated file, respect indentation, without ellipse, without workaround or defaut value

USER PREFERENCES:
Extremely detail-oriented about AI_TURN.md compliance
Wants exact specification implementation, not approximations
Prefers systematic debugging with evidence before solutions
Requires proper file paths and change tracking in format: FILE: path / CHANGE# / LINES / TYPE / BEFORE/AFTER / RESULT
Uses specific error reporting format with TypeScript compiler output
No workarounds or hacks - find and fix the root cause
Do NOT rush coding.
Check and tell me what files you need, make an EXPERT investigation, add debug logs if needed, and then, tell me the fix you'll apply

----------------------------------------------------------------------------
BUGS
----------------------------------------------------------------------------

WAIT is for when the agent DECIDES to NOT perform an action.
SKIP is when the agent CANNOT perform an action
It the agent chooses a wrong action (charge during shooting phase), give it the -0.5 reward penalty and skip its action

TRAIN:
Quel fichier de reward ?

MOVE :
Preview green hex != valid hexes : sometimes, when I click on a green hex as a move destination, the move is cancelled and the unit is logged as wait.
1 : why can I click on a invalid hex ?
2 : why a green hex is considered as an invalid destination ?

SHOOT

HP preview screwed when unit has lost 1 HP. The back space for the lost HP blinks instead of remaining black
Couleur de HP bar dans css (et couleur du blink preview aussi)
Calcul different entre les hex rouges et les unit blink
dead : noir et retirer icon
Utilise App.css pour la log ?

Externalize end_activation fuction ?
Check shooting LoS logic (cube ?)
----------------------------------------------------------------------------
TEST :
Terminal 1 : 
python services/api_server.py
Terminal 2 :
app
Terminal 3 :
python tests/test_board.py
----------------------------------------------------------------------------
ARCHITECTURE
Engine Responsibilities (Global Management):	
Phase sequencing: ✅ Controls phase transitions
Turn management: ✅ Player switching and turn counter
Global Episode step counting: ✅ Stores the counter variable
Game over detection: ✅ Win/loss conditions

Handler Responsibilities (Phase Execution):
Episode step incrementation: ✅ Handlers call increment via _end_activation()
All phase logic: ✅ Complete state machines in handlers
All unit management: ✅ Eligibility, activation, tracking
----------------------------------------------------------------------------
callback chain: 
UnitRenderer (event dispatch) → 
window.addEventListener (boardClickHandler) → 
setupBoardClickHandler callbacks → 
BoardPvp prop callbacks → 
BoardWithAPI prop spreading → 
useEngineAPI handlers → 
executeAction fetch → 
API Server → 
shooting_handlers.py (should be, but currently conflicts)
----------------------------------------------------------------------------
code $PROFILE
Relancer VSC